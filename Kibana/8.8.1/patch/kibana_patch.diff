diff --git a/WORKSPACE.bazel b/WORKSPACE.bazel
index d32fec9840d..9b21b3505d7 100644
--- a/WORKSPACE.bazel
+++ b/WORKSPACE.bazel
@@ -26,6 +26,7 @@ node_repositories(
     "16.19.1-darwin_arm64": ("node-v16.19.1-darwin-arm64.tar.gz", "node-v16.19.1-darwin-arm64", "168f787f457bf645f3fc41e7419b62071db7d42519ce461b1d7ebfc0acbdbfb1"),
     "16.19.1-linux_arm64": ("node-v16.19.1-linux-arm64.tar.xz", "node-v16.19.1-linux-arm64", "042b3ae7e994a77bfdb0e366d0389c1b7602bb744830da15f9325f404f979ce2"),
     "16.19.1-linux_amd64": ("node-v16.19.1-linux-x64.tar.xz", "node-v16.19.1-linux-x64", "fa796a23837dc5c22914b1349b6117df4d497e2001a4cd7b28b0767e22f3bb51"),
+    "16.19.1-linux_s390x": ("node-v16.19.1-linux-s390x.tar.xz", "node-v16.19.1-linux-s390x", "3291a5d092631462df757470ef601da37ba973e9ec749cac7417edb53e79ca73"),
     "16.19.1-windows_amd64": ("node-v16.19.1-win-x64.zip", "node-v16.19.1-win-x64", "77e0198497fee24552d6a6f1737eed595b619af1b749ee0bee4b938026e55f73"),
   },
   node_version = "16.19.1",
diff --git a/package.json b/package.json
index ca17e07036f..68f2cf916fd 100644
--- a/package.json
+++ b/package.json
@@ -1331,7 +1331,7 @@
     "backport": "^8.9.7",
     "callsites": "^3.1.0",
     "chance": "1.0.18",
-    "chromedriver": "^113.0.0",
+    "chromedriver": "file:../node-chromedriver",
     "clean-webpack-plugin": "^3.0.0",
     "compression-webpack-plugin": "^4.0.0",
     "copy-webpack-plugin": "^6.0.2",
@@ -1496,4 +1496,4 @@
     "xmlbuilder": "13.0.2",
     "yargs": "^15.4.1"
   }
-}
\ No newline at end of file
+}
diff --git a/packages/kbn-babel-register/cache/lmdb_cache.js b/packages/kbn-babel-register/cache/lmdb_cache.js
index fe2179a5913..78038e5b076 100644
--- a/packages/kbn-babel-register/cache/lmdb_cache.js
+++ b/packages/kbn-babel-register/cache/lmdb_cache.js
@@ -55,17 +55,21 @@ class LmdbCache {
 
     const lastClean = this.#db.get('@last clean');
     if (!lastClean || lastClean[0] < GLOBAL_ATIME - 7 * DAY) {
-      try {
-        this.#pruneOldKeys();
-      } catch (error) {
-        process.stderr.write(`
+      if (lastClean) { //don't run pruneOldKeys the first time
+        try {
+          this.#pruneOldKeys();
+        } catch (error) {
+          process.stderr.write(`
 Failed to cleanup @kbn/babel-register cache:
 
   ${error.stack.split('\n').join('\n  ')}
 
 To eliminate this problem you may want to delete the "${Path.relative(process.cwd(), config.dir)}"
 directory and report this error to the Operations team.\n`);
-      } finally {
+        } finally {
+          this.#db.putSync('@last clean', [GLOBAL_ATIME, '', {}]);
+        }
+      } else { //!lastClean, first time
         this.#db.putSync('@last clean', [GLOBAL_ATIME, '', {}]);
       }
     }
diff --git a/src/dev/build/lib/platform.ts b/src/dev/build/lib/platform.ts
index 4c4ec271318..6bc68a1b569 100644
--- a/src/dev/build/lib/platform.ts
+++ b/src/dev/build/lib/platform.ts
@@ -7,7 +7,7 @@
  */
 
 export type PlatformName = 'win32' | 'darwin' | 'linux';
-export type PlatformArchitecture = 'x64' | 'arm64';
+export type PlatformArchitecture = 'x64' | 'arm64' | 's390x';
 
 export class Platform {
   constructor(
@@ -48,6 +48,7 @@ export class Platform {
 export const ALL_PLATFORMS = [
   new Platform('linux', 'x64', 'linux-x86_64'),
   new Platform('linux', 'arm64', 'linux-aarch64'),
+  new Platform('linux', 's390x', 'linux-s390x'),
   new Platform('darwin', 'x64', 'darwin-x86_64'),
   new Platform('darwin', 'arm64', 'darwin-aarch64'),
   new Platform('win32', 'x64', 'windows-x86_64'),
diff --git a/src/dev/build/tasks/nodejs/node_download_info.ts b/src/dev/build/tasks/nodejs/node_download_info.ts
index 821cdb6973c..a1f5e304f42 100644
--- a/src/dev/build/tasks/nodejs/node_download_info.ts
+++ b/src/dev/build/tasks/nodejs/node_download_info.ts
@@ -18,7 +18,7 @@ export function getNodeDownloadInfo(config: Config, platform: Platform) {
     ? 'win-x64/node.exe'
     : `node-v${version}-${arch}.tar.gz`;
 
-  const url = `https://us-central1-elastic-kibana-184716.cloudfunctions.net/kibana-ci-proxy-cache/dist/v${version}/${downloadName}`;
+  const url = `https://nodejs.org/dist/v${version}/${downloadName}`;
   const downloadPath = config.resolveFromRepo('.node_binaries', version, basename(downloadName));
   const extractDir = config.resolveFromRepo('.node_binaries', version, arch);
 
diff --git a/src/dev/build/tasks/patch_native_modules_task.ts b/src/dev/build/tasks/patch_native_modules_task.ts
index 2c4436f387d..300bb006483 100644
--- a/src/dev/build/tasks/patch_native_modules_task.ts
+++ b/src/dev/build/tasks/patch_native_modules_task.ts
@@ -22,6 +22,9 @@ import {
   read,
 } from '../lib';

+const zUrl = require('url');
+var zFile:string = zUrl.pathToFileURL('linux-s390x-93.gz').toString();
+
 const DOWNLOAD_DIRECTORY = '.native_modules';

 interface Package {
@@ -68,7 +71,11 @@ const packages: Package[] = [
       // * upload the `linux-arm64-*.gz` artifact to the `yarn-prebuilt-artifacts` bucket in GCS using the correct version number
       'linux-arm64': {
         url: 'https://us-central1-elastic-kibana-184716.cloudfunctions.net/kibana-ci-proxy-cache/node-re2/uhop/node-re2/releases/download/1.17.4/linux-arm64-93.gz',
-        sha256: '25409584f76f3d6ed85463d84adf094eb6e256ed1cb0b754b95bcbda6691fc26',
+        sha256: '25610e43ad4852a46345b84e5b1a496c1c80183baeedb877b43b765c1b2ebfc7',
+      },
+
+      'linux-s390x': {
+        url: zFile,
       },

       // A similar process is necessary for building on ARM macs:
@@ -120,14 +127,21 @@ async function patchModule(
   log.debug(`Patching ${pkg.name} binaries from ${archive.url} to ${extractPath}`);

   await deleteAll([extractPath], log);
-  await downloadToDisk({
-    log,
-    url: archive.url,
-    destination: downloadPath,
-    shaChecksum: archive.sha256,
-    shaAlgorithm: 'sha256',
-    maxAttempts: 3,
-  });
+
+  if (platformName == "linux-s390x") {
+         console.log("Using locally built re2");
+  }
+  else {
+    await downloadToDisk({
+      log,
+      url: archive.url,
+      destination: downloadPath,
+      shaChecksum: archive.sha256,
+      shaAlgorithm: 'sha256',
+      maxAttempts: 3,
+    });
+  }
+
   switch (pkg.extractMethod) {
     case 'gunzip':
       await gunzip(downloadPath, extractPath);

diff --git a/src/dev/build/tasks/fleet/download_elastic_gpg_key.ts b/src/dev/build/tasks/fleet/download_elastic_gpg_key.ts
index 85e927001bd..6cd0b351c4d 100644
--- a/src/dev/build/tasks/fleet/download_elastic_gpg_key.ts
+++ b/src/dev/build/tasks/fleet/download_elastic_gpg_key.ts
@@ -13,7 +13,7 @@ import { ToolingLog } from '@kbn/tooling-log';
 import { downloadToDisk } from '../../lib';

 const ARTIFACTS_URL = 'https://artifacts.elastic.co/';
-const GPG_KEY_NAME = 'GPG-KEY-elasticsearch';
+const GPG_KEY_NAME = 'GPG-KEY-elasticsearch.sha1';
 const GPG_KEY_SHA512 =
   '84ee193cc337344d9a7da9021daf3f5ede83f5f1ab049d169f3634921529dcd096abf7a91eec7f26f3a6913e5e38f88f69a5e2ce79ad155d46edc75705a648c6';




