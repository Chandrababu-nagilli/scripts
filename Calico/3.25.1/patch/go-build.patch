diff --git a/Dockerfile.s390x b/Dockerfile.s390x
index 304c0de..06c27d4 100644
--- a/Dockerfile.s390x
+++ b/Dockerfile.s390x
@@ -1,23 +1,19 @@
-FROM alpine:3.17 as qemu
+FROM calico/bpftool:v5.3-s390x as bpftool
 
-ARG QEMU_VERSION=6.1.0-8
-ARG QEMU_ARCHS="s390x"
-
-RUN apk --update add curl
+FROM golang:1.18
+MAINTAINER Shaun Crampton <shaun@projectcalico.org>
 
-# Enable non-native runs on amd64 architecture hosts
-RUN for i in ${QEMU_ARCHS}; do curl -L https://github.com/multiarch/qemu-user-static/releases/download/v${QEMU_VERSION}/qemu-${i}-static.tar.gz | tar zxvf - -C /usr/bin; done
-RUN chmod +x /usr/bin/qemu-*
+ARG GO_VERSION=1.19.7
+ARG QEMU_VERSION=6.1.0-8
 
-FROM s390x/golang:1.19.12-alpine3.18
-MAINTAINER LoZ Open Source Ecosystem (https://www.ibm.com/developerworks/community/groups/community/lozopensource)
+# we need these two distinct lists. The first one is the names used by the qemu distributions
+# these second is the names used by golang see https://github.com/golang/go/blob/master/src/go/build/syslist.go
+# the primary difference as of this writing is that qemu uses aarch64 and golang uses arm64
+ARG QEMU_ARCHS="arm aarch64 ppc64le s390x"
+ARG CROSS_ARCHS="arm arm64 ppc64le s390x"
 
 ARG MANIFEST_TOOL_VERSION=v1.0.2
 
-# Enable non-native builds of this image on an amd64 hosts.
-# This must be the first RUN command in this file!
-COPY --from=qemu /usr/bin/qemu-*-static /usr/bin/
-
 # Install su-exec for use in the entrypoint.sh (so processes run as the right user)
 # Install bash for the entry script (and because it's generally useful)
 # Install curl
@@ -28,45 +24,84 @@ COPY --from=qemu /usr/bin/qemu-*-static /usr/bin/
 # Install make for building things
 # Install util-linux for column command (used for output formatting).
 # Install grep, sed, zip, and jq for use in some Makefiles
-# Install shadow for useradd (it allows to use big UID)
-RUN apk update && apk add --no-cache su-exec curl bash git openssh mercurial make wget util-linux tini file grep sed jq zip shadow libpcap-dev
-RUN apk upgrade --no-cache
+# Install gcc for cgo.
+# Install lsb-release software-properties-common for llvm upgrade script
+# Install clang, libbpf and newer kernel headers for building BPF binaries.
+# Install apt-utils, libpcre++-dev and libraries for ModSecurity dependencies.
+RUN apt-get -y update &&  \
+    apt-get -y upgrade && \
+    apt-get install --no-install-recommends -y \
+        libbpf-dev linux-headers-s390x  && \
+    apt-get install --no-install-recommends -y \
+        curl bash git openssh-client mercurial make wget util-linux file grep sed jq zip \
+        lsb-release software-properties-common binutils file iproute2 \
+        ca-certificates gcc mingw-w64 libc-dev bsdmainutils strace libpcap-dev \
+        apt-utils autoconf automake build-essential \
+        libcurl4-openssl-dev libgeoip-dev liblmdb-dev \
+        libpcre++-dev libtool libxml2-dev libyajl-dev \
+        pkgconf zlib1g-dev && \
+    rm -rf /var/lib/apt/lists/*
+
+RUN wget https://go.dev/dl/go${GO_VERSION}.linux-s390x.tar.gz
+RUN rm -rf /usr/local/go && tar -C /usr/local -xzf go${GO_VERSION}.linux-s390x.tar.gz
+RUN rm go${GO_VERSION}.linux-s390x.tar.gz
+RUN wget https://apt.llvm.org/llvm.sh
+RUN bash ./llvm.sh 12
+RUN apt install clang-12
+
+# su-exec is used by the entrypoint script to execute the user's command with the right UID/GID.
+# (sudo doesn't work easily in a container.)  The version was current master at the time of writing.
+ARG SU_EXEC_VER=212b75144bbc06722fbd7661f651390dc47a43d1
+RUN  set -ex; \
+     curl -o /sbin/su-exec.c https://raw.githubusercontent.com/ncopa/su-exec/${SU_EXEC_VER}/su-exec.c; \
+     gcc -Wall /sbin/su-exec.c -o/sbin/su-exec; \
+     chown root:root /sbin/su-exec; \
+     chmod 0755 /sbin/su-exec; \
+     rm /sbin/su-exec.c
+
+RUN go install github.com/vektra/mockery/v2@latest
 
 # Disable ssh host key checking
 RUN echo 'Host *' >> /etc/ssh/ssh_config \
   && echo '    StrictHostKeyChecking no' >> /etc/ssh/ssh_config
 
-# Disable cgo so that binaries we build will be fully static.
-ENV CGO_ENABLED=0
+# We want to be able to do both cgo and non-cgo builds.  That's awkward because toggling cgo
+# results in parts of the stdlib getting rebuilt (which fails due to the container's read-only
+# filesystem).  As a workaround: take a copy of the go root for cgo builds and have the
+# entrypoint script swap it into the path if it detects CGO_ENABLED=1.
+ENV GOROOT=/usr/local/go
+ENV GOCGO=/usr/local/go-cgo
 
-# Recompile the standard library with cgo disabled.  This prevents the standard library from being
-# marked stale, causing full rebuilds every time.
-RUN go install -v std
+# Disable cgo by default so that binaries we build will be fully static by default.
+ENV CGO_ENABLED=0
 
-# Install ginkgo CLI tool for running tests
-RUN go install github.com/onsi/ginkgo/ginkgo@v1.16.5
+RUN cp -a $GOROOT $GOCGO && \
+  go install -v std && \
+  rm -rf /go/src/* /root/.cache
 
-# Install linting tools
 ENV GO_LINT_VERSION=v1.50.1
+
+# Install go programs that we rely on
 RUN \
+  go install github.com/onsi/ginkgo/ginkgo@v1.16.5 && \
+  go install golang.org/x/tools/cmd/goimports@v0.1.10 && \
   curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin $GO_LINT_VERSION && \
-  golangci-lint --version
-
-# Install license checking tool.
-RUN go install github.com/pmezard/licenses@master
-
-# Install tool to merge coverage reports.
-RUN go install github.com/wadey/gocovmerge@master
-
-# Install CLI tool for working with yaml files
-RUN go install github.com/mikefarah/yq/v3@3.4.1
-
-# Delete all the Go sources that were downloaded, we only rely on the binaries
-RUN rm -rf /go/src/*
-
-# Install generation tools.
-RUN  go install k8s.io/code-generator/cmd/openapi-gen@master
-RUN  go install k8s.io/code-generator/cmd/deepcopy-gen@master
+  golangci-lint --version && \
+  go install github.com/pmezard/licenses@master && \
+  go install github.com/wadey/gocovmerge@master && \
+  go install github.com/mikefarah/yq/v3@3.4.1 && \
+  go install github.com/jstemmer/go-junit-report@v1.0.0 && \
+  go install golang.org/x/tools/cmd/stringer@v0.1.10 && \
+  go install k8s.io/code-generator/cmd/openapi-gen@v0.24.0 && \
+  go install k8s.io/code-generator/cmd/deepcopy-gen@v0.24.0 && \
+  go install k8s.io/code-generator/cmd/client-gen@v0.24.0 && \
+  go install k8s.io/code-generator/cmd/lister-gen@v0.24.0 && \
+  go install k8s.io/code-generator/cmd/informer-gen@v0.24.0 && \
+  go install k8s.io/code-generator/cmd/defaulter-gen@v0.24.0 && \
+  go install k8s.io/code-generator/cmd/conversion-gen@v0.24.0 && \
+  go install github.com/swaggo/swag/cmd/swag@v1.8.7 && \
+  go install gotest.tools/gotestsum@latest && \
+  rm -rf /go/src/* /root/.cache
 
 # Install ginkgo v2 as ginkgo2 and keep ginkgo v1 as ginkgo
 RUN mv /go/bin/ginkgo /go/bin/ginkgo1 && \
@@ -74,13 +109,23 @@ RUN mv /go/bin/ginkgo /go/bin/ginkgo1 && \
   mv /go/bin/ginkgo /go/bin/ginkgo2 && \
   mv /go/bin/ginkgo1 /go/bin/ginkgo
 
-# Install Swaggo
-RUN go install github.com/swaggo/swag/cmd/swag@v1.8.7
-
 # Install necessary Kubernetes binaries used in tests.
 RUN wget https://dl.k8s.io/v1.24.0/bin/linux/s390x/kube-apiserver -O /usr/local/bin/kube-apiserver && chmod +x /usr/local/bin/kube-apiserver && \
-	wget https://dl.k8s.io/release/v1.24.0/bin/linux/s390x/kubectl -O /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl && \
-	wget https://dl.k8s.io/v1.24.0/bin/linux/s390x/kube-controller-manager -O /usr/local/bin/kube-controller-manager && chmod +x /usr/local/bin/kube-controller-manager
+        wget https://dl.k8s.io/release/v1.24.0/bin/linux/s390x/kubectl -O /usr/local/bin/kubectl && chmod +x /usr/local/bin/kubectl && \
+        wget https://dl.k8s.io/v1.24.0/bin/linux/s390x/kube-controller-manager -O /usr/local/bin/kube-controller-manager && chmod +x /usr/local/bin/kube-controller-manager
+# Used for generating CRD files.
+# Download a version of controller-gen that has been hacked to support additional types (e.g., float).
+# We can remove this once we update the Calico v3 APIs to use only types which are supported by the upstream controller-gen
+# tooling. Example: float, all the types in the numorstring package, etc.
+RUN wget -O ${GOPATH}/bin/controller-gen https://github.com/projectcalico/controller-tools/releases/download/calico-0.1/controller-gen && chmod +x ${GOPATH}/bin/controller-gen
+
+# Enable non-native runs on amd64 architecture hosts
+RUN for i in ${QEMU_ARCHS}; do curl -L https://github.com/multiarch/qemu-user-static/releases/download/v${QEMU_VERSION}/qemu-${i}-static.tar.gz | tar zxvf - -C /usr/bin; done
+RUN chmod +x /usr/bin/qemu-*
+
+# When running cross built binaries run-times will be auto-installed,
+# ensure the install directory is writable by everyone.
+RUN for arch in ${CROSS_ARCHS}; do mkdir -m +w -p /usr/local/go/pkg/linux_${arch}; GOARCH=${arch} go install -v std; done
 
 # Ensure that everything under the GOPATH is writable by everyone
 RUN chmod -R 777 $GOPATH
@@ -89,5 +134,18 @@ RUN curl -sSL https://github.com/estesp/manifest-tool/releases/download/${MANIFE
     chmod +x manifest-tool && \
     mv manifest-tool /usr/bin/
 
+# crane is needed for our release targets to copy images from the dev registries to the release registries.
+RUN wget https://github.com/google/go-containerregistry/releases/download/v0.14.0/go-containerregistry_Linux_s390x.tar.gz && \
+    tar -xvf go-containerregistry_Linux_s390x.tar.gz && \
+    chmod +x crane && \
+    mv crane /usr/bin
+
+# Add bpftool for Felix UT/FV.
+COPY --from=bpftool /bpftool /usr/bin
+
+# Build ModSecurity for Dikastes.
+COPY scripts/modsec.sh /usr/local/bin/scripts/modsec.sh
+RUN /usr/local/bin/scripts/modsec.sh
+
 COPY entrypoint.sh /usr/local/bin/entrypoint.sh
-ENTRYPOINT ["/sbin/tini", "--", "/usr/local/bin/entrypoint.sh"]
+ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
